name: push-container

on:
  push:
    branches:
      - 'quantum'
      - 'feature/push-to-container-registry'
    tags:
      - 'v*'
  schedule:
    # * is a special character in YAML so you have to quote this string
    # at 03:00 on the 1st and 15th of the month
    - cron:  '0 3 1,15 * *'

env:
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate secret defined
        id: from_secrets
        run: |
          github_container_push="true";
          dockerhub_token_exists="false";
          dockerhub_username_exists="false";
          dockerhub_namespace_exists="false";

          [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]] && dockerhub_token_exists="true";
          [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]] && dockerhub_username_exists="true";
          [[ -n "${{ secrets.DOCKERHUB_NAMESPACE }}" ]] && dockerhub_namespace_exists="true";
          [[ "true" = "${{ secrets.GITHUB_CONTAINER_PUSH_DISABLED }}" ]] && github_container_push="false";

          echo "::set-output name=dockerhub_token_exists::${dockerhub_token_exists}";
          echo "::set-output name=dockerhub_username_exists::${dockerhub_username_exists}";
          echo "::set-output name=dockerhub_namespace_exists::${dockerhub_namespace_exists}";
          echo "::set-output name=github_container_push::${github_container_push}";

      - name: Generate container image names
        id: generate_image_names
        run: |
          repository_name="$(basename "${GITHUB_REPOSITORY}")";
          images=();

          if [[ "${{ steps.from_secrets.outputs.github_container_push }}" = "true" ]];
          then
            # set GITHUB_CONTAINER_PUSH_DISABLED to a value of true to disable pushing to github container registry
            images+=("ghcr.io/${GITHUB_REPOSITORY}");
          fi

          if [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]] && [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]] && [[ -n "${{ secrets.DOCKERHUB_NAMESPACE }}" ]];
          then
            # dockerhub repository should be the same as the github repository name, within the dockerhub namespace (organization or personal)
            images+=("${{ secrets.DOCKERHUB_NAMESPACE }}/${repository_name}");
          fi

          # join the array for Docker meta job to produce image tags
          # https://github.com/crazy-max/ghaction-docker-meta#inputs
          echo "::set-output name=images::$(IFS=,; echo "${images[*]}")";

      - name: Docker meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ steps.generate_image_names.outputs.images }}
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=edge,branch=master
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Login to DockerHub
        uses: docker/login-action@v1
        # conditions do not have direct access to github secrets so we check the output of the step from_secrets
        if: ${{ steps.from_secrets.outputs.dockerhub_namespace_exists == 'true' && steps.from_secrets.outputs.dockerhub_token_exists == 'true' && steps.from_secrets.outputs.dockerhub_username_exists == 'true' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ steps.from_secrets.outputs.github_container_push == 'true' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./compose/production/django/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          # type=gha will replace type=local when a buildx release containing
          # https://github.com/docker/buildx/commit/5ca0cbff8ed63450a6d4a3b32659e9521d329a43 is published
          # https://github.com/docker/buildx/pull/535
          # cache-from: type=gha
          # cache-to: type=gha

      - name: Move cache
        # This step can be removed when cache-from/cache-to have been updated to use type=gha
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache